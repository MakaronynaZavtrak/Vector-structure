#include <iostream>
#include <math.h>
#include <string>
#include "Struct.h"

double mixedMultiplication(Vector a, Vector b, Vector c) {//Смешанное произведение
	double result = a.x * (b.y * c.z - c.y * b.z) - a.y * (b.x * c.z - c.x * b.z) + a.z * (b.x * c.y - c.x * b.y);
	cout << "Mixed multiplication is " << result << endl;
	return result;
}

void printNewVector(Vector a) {//функция, выводящая координаты вектора в скобочках
		std::cout << "(" << a.x << "," << a.y << "," << a.z << ")" << endl;
}

template <typename T>
void printf(T result) {//функция, аналогичная "cout"-у, но более короткая
	std::cout << result;
}

template <class S>
void printfEndl(S result) {//
	std::cout << result << std::endl;
}

Vector findNormalVector(Vector a, Vector b) {//Нахождение нормального вектора согласно правой тройке
	Vector c = vectorMultiplication(a, b);
	printf("Normal vector: ");
	printNewVector(c);
	return c;
}

Vector someTMultiplication(double t, Vector a) {//произведение вектора на скаляр
	a.x *= t;
	a.y *= t;
	a.z *= t;
	printf("Result of Some T multiplication:");
	printNewVector(a);
	return a;
}

Vector summVectors(Vector a, Vector b) {//Сложение двух векторов
	Vector c;
	c.x = a.x+b.x;
	c.y = a.y+b.y;
	c.z = a.z+b.z;
	printf("Summ of vectors: ");
	printNewVector(c);
	return c;
}

double findLength(Vector a) {//Нахождение длины вектора
	double ln = (sqrt(pow(a.x, 2) + pow((a.y), 2) + pow((a.z), 2)));
	printf("The length of vector: ");
	printf(ln);
	printfEndl("");
	return ln;
}

Vector shortedNormed(Vector a) {//Нормирование вектора
	double length = findLength(a);
	if (length == 1 || length == 0){
		printf("Normed vector :");
		printNewVector(a);
		return a;
	} else {
		Vector c;
		c.x = a.x / length;
		c.y = a.y / length;
		c.z = a.z / length;
		printf("Normed vector :");
		printNewVector(c);
		return c;
	};
}

double scalMultiplication(Vector a, Vector b) {//Скалярное произведение двух векторов
	double scal = a.x * b.x + a.y * b.y + a.z * b.z;
	printf("Scalar multuplication : ");
	printf(scal);
	printfEndl("");
	return scal;
}

Vector vectorMultiplication(Vector a, Vector b) {//Векторное произведение двух векторов
	Vector c;
	c.x = a.y * b.z - a.z * b.y;
	c.y = -1 * (a.x * b.z - b.x * a.z);
	c.z = a.x * b.y - b.x * a.y;
	if (abs(c.y) == 0) {
		c.y = 0;
	};
	printf("Result of vector multiplication:");
	printNewVector(c);
	return c;
}

double getAngle(Vector a, Vector b) {//функция нахождения угла между двумя векторами
	double module1 = findLength(a);
	double module2 = findLength(b);
	double scalMult = scalMultiplication(a,b);
	double Cosinus = scalMult / (module1 * module2);
	double angle = (acos(Cosinus)) * (180 / 3.1415926);
	printf("angle is:");
	printf(angle);
	printfEndl("");
	return angle;
}

Vector getRotatedVector(Vector a, Vector b)//функция нахождения координат повёрнутого вектора
{
	Vector d = vectorMultiplication(Vector a, Vector b);
	 rotateAngle = getAngle(a, b);
	 Vector c;
	c.x = (cos(rotateAngle)+(1-cos(rotateAngle)*d.x*d.x)*a.x + (1-cos(rotateAngle)*d.x*d.y-sin(rotateAngle)*d.z)*a.y + (1-cos(rotateAngle)*d.x*d.z + sin(rotateAngle)*d.y)*a.z;
	c.y = (1-cos(rotateAngle)*d.y*d.x + sin(rotateAngle)*d.z)*a.x + (cos(rotateAngle)+(1-cos(rotateAngle)*d.y*d.y))*a.y + (1 - cos(rotateAngle)*d.y*d.z - sin(rotateAngle)*d.x)a.z;
	c.z = ((1-cos(rotateAngle))*d.z*d.x - sin(rotateAngle)*d.y)*a.x + ((1-cos(rotateAngle))*d.z*d.y + sin(rotateAngle)*d.x)*a.y + (cos(rotateAngle)+(1-cos(rotateAngle))*d.z*d.z)*a.z;
	printf("Rotated vector is:");
	printNewVector(c);
	printfEndl("");
	return c;
}
